<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[function DomTerm(parentDiv) {
	this.settings = {
		consoleSize : [80,20],
		backgroundColor : '#ffffff',
		foregroundColor : '#000000',
			container : parentDiv,
		displayId : parentDiv + '_termDisplay',
		inputId : parentDiv + '_termInput',
		selectionId : parentDiv + '_selection',
		cmds : [],
		inputTask : {
			active : false
		},
		consoleEcho : false,
		selection : false,
		history : [],
		currentHistoryItem : -1,
		scripts : [],
		waitLabel : '',
		outputPipe : {
			active : false,
			text : ''
		}
	};
}

DomTerm.prototype = {
	boot : function() {
		this.drawTerm();
		document.getElementById(this.settings.inputId).style.width = (document.body.scrollWidth - 30).toString() + 'px';
		document.getElementById(this.settings.displayId).style.width = (document.body.scrollWidth - 30).toString() + 'px';
		document.getElementById(this.settings.displayId).style.height = (document.body.scrollHeight - 150).toString() + 'px';
	},
	drawTerm : function() {
		var htmlContent = '<input autocomplete="off" type="text" id="' + this.settings.inputId + '" style="width:520px;border:none;" /><br/>';
		htmlContent += '<pre id="' + this.settings.displayId + '" style="width:520px;overflow-y:scroll;height:400px;outline:none;resize: both;overflow: auto;"></pre><br/>';
		htmlContent += '<input type="button" id="' + this.settings.selectionId + '" value="Turn Selection Mode On" />';
		document.getElementById(this.settings.container).innerHTML = htmlContent;
		document.getElementById(this.settings.inputId).addEventListener('keyup',this.handleInput.bind(this),false);
		document.getElementById(this.settings.displayId).addEventListener('mouseup',this.resizeEntry.bind(this),false);
		document.getElementById(this.settings.selectionId).addEventListener('click',this.toggleSelection.bind(this),false);
		document.getElementById(this.settings.inputId).focus();
	},
	toggleSelection : function(event) {
		if (this.settings.selection) {
			this.settings.selection = false;
			document.getElementById(this.settings.selectionId).value = 'Turn Selection Mode On';
		}
		else {
			this.settings.selection = true;
			document.getElementById(this.settings.selectionId).value = 'Turn Selection Mode Off';
		}
		document.getElementById(this.settings.inputId).focus();
	},
	resizeEntry : function(event) {
		document.getElementById(this.settings.inputId).style.width = document.getElementById(this.settings.displayId).style.width;
		if (!this.settings.selection) {
			document.getElementById(this.settings.inputId).focus();
		}
	},
	clearConsole : function() {
		document.getElementById(this.settings.displayId).innerHTML = '';
	},
	showOutput : function(outputText) {
		if (this.settings.outputPipe.active) {
			this.settings.outputPipe.text += outputText + '\n';
		}
		else {
			document.getElementById(this.settings.displayId).innerHTML = outputText + '\n' + document.getElementById(this.settings.displayId).innerHTML;
		}
	},
	startPipedOutput : function() {
		this.settings.outputPipe.active = true;
	},
	returnPipedOutput : function() {
		var returnData = '';
		if (this.settings.outputPipe.active) {
			returnData = this.settings.outputPipe.text;
			this.settings.outputPipe.active = false;
			this.settings.outputPipe.text = '';
			this.showOutput('Piped output is complete');
		}
		return returnData;
	},
	replaceConosleText : function(origText,replaceWith) {
		if (this.settings.outputPipe.active) {
			var pipeText = this.settings.outputPipe.text;
			this.settings.outputPipe.text = pipeText.replace(origText,replaceWith);
		}
		else {
			var consoleText = document.getElementById(this.settings.displayId).innerHTML;
			document.getElementById(this.settings.displayId).innerHTML = consoleText.replace(origText,replaceWith);
		}
	},
	addScheduledTask : function(taskFunction,taskSeconds,helpData) {
		this.settings.scheduledTasks.push({
			run:taskFunction,
			interval:taskSeconds*1000,
			help:helpData
		});
	},
	getScheduledTaskCount : function () {
		return this.settings.scheduledTasks.length;
	},
	setCommandText : function(cmdText) {
		document.getElementById(this.settings.inputId).value = cmdText;
	},
	getCommandText : function() {
		return document.getElementById(this.settings.inputId).value;
	},
	startScheduledTasks : function() {
		this.settings.scheduledTasks = this.settings.scheduledTasks.map(function (thisTask) {
			var taskId = window.setInterval(function() {
				thisTask.run.call(this);
			},thisTask.interval);
			return {
				run:thisTask.run,
				interval:thisTask.interval,
				help:thisTask.help,
				task:taskId
			};
		});
		this.settings.runningTasks = true;
	},
	stopScheduledTasks : function() {
		this.settings.scheduledTasks = this.settings.scheduledTasks.map(function (thisTask) {
			window.clearInterval(thisTask.task);
			return {
				run:thisTask.run,
				interval:thisTask.interval,
				help:thisTask.help
			};
		});
		this.settings.runningTasks = false;
	},
	addScript : function(scriptName,cmdAr, scriptDescr) {
		this.settings.scripts.push({
			name : scriptName,
			description : scriptDescr,
			commands : cmdAr
		});
	},
	runScript : function(scriptName) {
		if (this.existScript(scriptName)) {
			var scriptCommands = this.settings.scripts.filter(function(thisScript) {
				return thisScript.name == scriptName;
			})[0].commands;
			
			for (var i = 0; i < scriptCommands.length; i++) {
				this.setCommandText(scriptCommands[i]);
				this.runCommandScript();
			}
		}
	},
	existScript : function(scriptName) {
		var scriptFoundCount = this.settings.scripts.filter(function(thisScript) {
			return thisScript.name == scriptName;
		});
		return scriptFoundCount;
	},
	beginOutputWait : function(label) {
		this.showOutput('WAITING-FOR-' + label);
		this.settings.waitLabel = label;
	},
	endOutputWait : function(outputText) {
		this.replaceConosleText('WAITING-FOR-' + this.settings.waitLabel,outputText);
		this.settings.waitLabel = '';
	},
	addCommand : function(cmdName,cmdFunction,helpData) {
		if (this.existCommand(cmdName).length == 0) {
			this.settings.cmds.push({
				name:cmdName,
				run:cmdFunction,
				help:helpData
			});
		}
	},
	existCommand : function(cmdName) {
		return this.settings.cmds.filter(function(command) {
			return command.name == cmdName;
		});
	},
	addInputTask : function(inputFunction) {
		this.settings.inputTask = {
			run : inputFunction,
			active : true
		};
	},
	resetInputTask : function() {
		this.settings.inputTask = {
			active : false
		};
	},
	handleInput : function(event) {
		//Escape
		if (event.keyCode == 27) {
			this.setCommandText('');
		}
		//Pressed up
		else if (event.keyCode == 38) {
			this.setCommandText(this.settings.history[this.settings.currentHistoryItem]);
			if (this.settings.currentHistoryItem > 0) {
				this.settings.currentHistoryItem -= 1;
			}
			
		}
		//Pressed down
		else if (event.keyCode == 40) {
			if (this.settings.currentHistoryItem < (this.settings.history.length - 1)) {
				this.settings.currentHistoryItem += 1;
			}
			this.setCommandText(this.settings.history[this.settings.currentHistoryItem]);
		}
		//Pressed enter
		else if (event.keyCode == 13) {
			this.runCommandScript();
		}
		else if (event.ctrlKey && event.keyCode == 192) {
			
		}
	},
	runCommandScript : function() {
		var inputText = document.getElementById(this.settings.inputId).value;
		this.settings.history.push(inputText);
		this.settings.currentHistoryItem = this.settings.history.length -1;
		if (inputText.length > 0) {
			if (this.settings.inputTask.active) {
				if (this.settings.consoleEcho) {
					this.showOutput('> ' + inputText);
				}
				this.settings.inputTask.run(inputText);
			}
			else {
				var rootCmd = inputText.replace(/^([^ \t]+).*$/,"$1");
				if (this.existCommand(rootCmd).length > 0) {
					if (this.settings.consoleEcho)
						this.showOutput('> ' + inputText);
					this.settings.cmds.filter(function(command) {
						return command.name == rootCmd;
					})[0].run(inputText);
				}
				else if (this.existScript(inputText).length > 0) {
					if (this.settings.consoleEcho)
						this.showOutput('> ' + inputText);
					this.runScript(inputText);
				}
				else {
					this.showOutput('Command not found (' + rootCmd + ')');
				}
			}
			
			document.getElementById(this.settings.inputId).value = '';
		}
	}
};

DomTerm.prototype.constructor = DomTerm;

var snCli = null;

function initiateCLI() {
	var urlParams = getUrlParams();
	var loadProfile = "";
	
	for (var i = 0; i < urlParams.length; i++) {
		if (urlParams[i].arg == 'loadprofile' && urlParams[i].value.length > 0) {
			loadProfile = urlParams[i].value;
		}
	}
	
	if (loadProfile.length > 0) {
		loadTerm('myterminal',loadProfile);
	}
	else {
		var callServerApi = new GlideAjax('x_293397_web_cli.ConfigureCLI');
		callServerApi.addParam('sysparm_name','getDefaultProfile');
		callServerApi.addParam('sysparm_cli_user_sys_id',g_user.userID);
		callServerApi.addParam('sysparm_scope','x_293397_web_cli');
		callServerApi.getXML(function(response) {
			var profileSysId = response.responseXML.documentElement.getAttribute('answer');
			loadTerm('myterminal',profileSysId);
		});
	}
}


function getUrlParams() {
	return window.location.search.replace(/^\?/,'').split('&').map(function(thisArg) {
		return {
			'arg' : thisArg.split('=')[0],
			'value' : thisArg.split('=')[1]
		};
	});
	
}

function loadTerm(divid,terminalProfile) {
	snCli = new DomTerm(divid);
	
	snCli.addCommand('clear',function(command) {
		snCli.clearConsole();
	},{
		description : 'Clears contents of console',
		usage : 'clear'
	});
	
	snCli.addCommand('info',function(command) {
		snCli.showOutput('Configuration Loaded:\n  ' + snCli.settings.cmds.length.toString() + ' commands\n  ' + snCli.settings.scripts.length.toString() + ' scripts');
	},{
		description : 'Display terminal information',
		usage : 'info'
	});
	
	snCli.addCommand('echo',function(command) {
		command = command.replace(/^echo[ \t]*/,'');
		if (command == 'on') {
			snCli.settings.consoleEcho = true;
			snCli.showOutput('echo is on');
		}
		else if (command == 'off') {
			snCli.settings.consoleEcho = false;
			snCli.showOutput('echo is off');
		}
		else if (command.length == 0) {
			snCli.showOutput('echo is ' + ((snCli.settings.consoleEcho) ? 'on' : 'off'));
		}
		else {
			snCli.showOutput('Invalid echo option (' + command + ')');
		}
	},{
		description : 'Change command echo functionality',
		usage : 'echo &lt;on|off&gt;'
	});
	
	snCli.addCommand('print',function(input) {
		input = input.replace(/^print[ \t]*/,'');
		snCli.showOutput(input);
	});
	
	snCli.addCommand('grep',function(input) {
		if (snCli.settings.outputPipe.active) {
			input = input.replace(/^grep[ \t]+/,"");
			
			snCli.showOutput(snCli.returnPipedOutput().split('\n').filter(function(thisLine) {
				return thisLine.indexOf(input) > -1;
			}).join('\n'));
		}
		else {
			snCli.showOutput('No active pipes (use pipeon)');
		}
		
	},{
		description : 'Search piped output',
		usage : 'grep &lt;text&gt;'
	});
	
	snCli.addCommand('count',function(input) {
		if (snCli.settings.outputPipe.active) {
			input = input.replace(/^count[ \t]+/,"");
			switch(input) {
				case "line" : snCli.showOutput("Lines:  " + snCli.returnPipedOutput().split('\n').length.toString()); break;
				case "char" : snCli.showOutput("Characters :  " + snCli.returnPipedOutput().length.toString()); break;
				case "" : snCli.showOutput('Requires line or char'); break;
				default : snCli.showOutput('Invalid argument (' + input + ')'); break;
			}
		}
		else {
			snCli.showOutput('Mp active pipes (use pipeon)');
		}
	},{
		description : 'Return count data from piped output',
		usage : 'count <line|char>'
	});
	
	snCli.addCommand('pipeon',function() {
		if (snCli.settings.outputPipe.active) {
			snCli.showOutput('Pipe is already active');
		}
		else {
			snCli.showOutput('Piped output is activated');
			snCli.settings.outputPipe.active = true;
		}
	},{
		description : 'Turn on piped output functionality',
		usage : 'pipeon'
	});
	
	snCli.addCommand('help',function(input) {
		input = input.replace(/^help[ \t]*/,'');
		
		if (input.length > 0) {
			var commandData = snCli.settings.cmds.filter(function(thisCmd) {
				return thisCmd.name == input;
			});
			
			var scriptData = snCli.settings.scripts.filter(function(thisScr) {
				return thisScr.name == input;
			});
			
			if (commandData.length == 1) {
				snCli.showOutput(commandData[0].help.description + '\nusage: ' + commandData[0].help.usage + '\n');
			}
			else if (scriptData.length == 1) {
				snCli.showOutput(scriptData[0].description + '\n  Commands executed in script:\n' + scriptData[0].commands.map(function(thisCmd) {
					return '    > ' + thisCmd;
				}).join('\n'));
			}
			else {
				snCli.showOutput('Command not found (' + input + ')');
			}
		}
		else {
			snCli.showOutput('Available commands:\n' + snCli.settings.cmds.map(function(itm) {
				return "   " + itm.name;
			}).sort().join('\n') + '\nAvailable Scripts:\n' + snCli.settings.scripts.map(function(itm) {
				return "   " + itm.name;
			}).sort().join('\n') + '\nCommand-specific information:\n   help &lt;command&gt;');
		}
	},{
		description : 'Show help information',
		usage : 'help [&lt;command&gt;]'
	});
	
	snCli.addCommand('history',function() {
		for (var i = 0; i < snCli.settings.history.length; i++) {
			snCli.showOutput((i+1).toString() + ': ' + snCli.settings.history[i]);
		}
	},{
		description : 'Show command history',
		usage : 'history'
	});
	
	snCli.addCommand('rerun',function(command) {
		command = command.replace(/^rerun[ \t]*/,"");
		
		var cmdIdx = eval(command) - 1;
		if (cmdIdx <= snCli.settings.history.length) {
			snCli.setCommandText(snCli.settings.history[cmdIdx]);
			snCli.runCommandScript();
		}
	},{
		description : "Rerun command listed in history",
		usage : "rerun &lt;history-id&gt;"
	});
	
	var cmdAr = [];
	var taskAr = [];
	
	var configureCliApi = new GlideAjax('x_293397_web_cli.ConfigureCLI');
	configureCliApi.addParam('sysparm_name','loadProfile');
	configureCliApi.addParam('sysparm_cli_profile_sys_id',terminalProfile);
	configureCliApi.getXML(function(response) {
		var cliData = JSON.parse(response.responseXML.documentElement.getAttribute('answer'));
		if (cliData.success) {
			cliData.commands.forEach(function(thisCommand) {
				snCli.addCommand(thisCommand.name,function(input) {
					eval(thisCommand.script);
				},{
					description : thisCommand.description,
					usage : thisCommand.usage
				});
			});
			cliData.scripts.forEach(function(thisScript) {
				snCli.addScript(thisScript.name,thisScript.commands,thisScript.description);
			});
		}
	});
	
	snCli.boot();
}]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_293397_web_cli_run_terminal.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
	<div id="myterminal"></div>
	<script>
		addLoadEvent( function() {
			initiateCLI();
		});
	</script>
</j:jelly>]]></html>
        <name>run_terminal</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-23 15:34:50</sys_created_on>
        <sys_id>4d2cbf60db81330082269fd2ca961959</sys_id>
        <sys_mod_count>182</sys_mod_count>
        <sys_name>run_terminal</sys_name>
        <sys_package display_value="Web CLI" source="x_293397_web_cli">88edd7a8db01330082269fd2ca9619c5</sys_package>
        <sys_policy/>
        <sys_scope display_value="Web CLI">88edd7a8db01330082269fd2ca9619c5</sys_scope>
        <sys_update_name>sys_ui_page_4d2cbf60db81330082269fd2ca961959</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-10-08 14:37:25</sys_updated_on>
    </sys_ui_page>
</record_update>
